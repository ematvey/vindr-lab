{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to VinLab For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-vinlab","text":"For full documentation visit mkdocs.org .","title":"Welcome to VinLab"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"developer-guide/","text":"Development guide Scope Vinlab benefits from the works of many excellent opensource projects. If you have any improvements related to the upstream projects, please contribute these changes to the upstreams' offical repositories. This development guide only apply to works made by Vinlab Team and is specific to the logic of Vinlab. Contribution guideline If you have any idea that might improve Vinlab , feel free to make a feature request in the repo vinlab-frontend . If you have any feature implementation, bug fixing, or any code that improve a part of Vinlab , please making pull request to the associate repos. It is more that welcome if those pieces of code are documented and tested. Overview Vinlab is composed by multiple microservices. The deployment of those services can vary according to the use case. Vinlab Team provides some recipes to quickly deploy Vinlab in a repository named recipes . UI vinlab-frontend : The code for UI, mainly derived from OHIF. Backend vinlab-api : A REST API service writen in Go,handles all the logic under the vinlab excepts the DICOM uploading. vinlab-uploader : A REST API service handles the DICOM uploading. This service is writen in Python to utitlize the excellent PyDicom, a Dicom manipulation library. id-generator : A service that generates id for vinlab objects. Databases: Orthanc : Used as the DICOM storage. Elasticsearch : Used as the primary storage service storing all objects defined by Vinlab . Redis : Providing the locking mechanism. rqlite : Small database service shipped with id-generator . User management Keycloak : Keycloak is used as a Identity Access Management service, providing the authentication and access control. Keycloak must be initialized with predefinded user roles and rules.","title":"Developer Guide"},{"location":"developer-guide/#development-guide","text":"","title":"Development guide"},{"location":"developer-guide/#scope","text":"Vinlab benefits from the works of many excellent opensource projects. If you have any improvements related to the upstream projects, please contribute these changes to the upstreams' offical repositories. This development guide only apply to works made by Vinlab Team and is specific to the logic of Vinlab.","title":"Scope"},{"location":"developer-guide/#contribution-guideline","text":"If you have any idea that might improve Vinlab , feel free to make a feature request in the repo vinlab-frontend . If you have any feature implementation, bug fixing, or any code that improve a part of Vinlab , please making pull request to the associate repos. It is more that welcome if those pieces of code are documented and tested.","title":"Contribution guideline"},{"location":"developer-guide/#overview","text":"Vinlab is composed by multiple microservices. The deployment of those services can vary according to the use case. Vinlab Team provides some recipes to quickly deploy Vinlab in a repository named recipes .","title":"Overview"},{"location":"developer-guide/#ui","text":"vinlab-frontend : The code for UI, mainly derived from OHIF.","title":"UI"},{"location":"developer-guide/#backend","text":"vinlab-api : A REST API service writen in Go,handles all the logic under the vinlab excepts the DICOM uploading. vinlab-uploader : A REST API service handles the DICOM uploading. This service is writen in Python to utitlize the excellent PyDicom, a Dicom manipulation library. id-generator : A service that generates id for vinlab objects.","title":"Backend"},{"location":"developer-guide/#databases","text":"Orthanc : Used as the DICOM storage. Elasticsearch : Used as the primary storage service storing all objects defined by Vinlab . Redis : Providing the locking mechanism. rqlite : Small database service shipped with id-generator .","title":"Databases:"},{"location":"developer-guide/#user-management","text":"Keycloak : Keycloak is used as a Identity Access Management service, providing the authentication and access control. Keycloak must be initialized with predefinded user roles and rules.","title":"User management"},{"location":"getting-started/","text":"Getting started","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"user-guide/annotator/","text":"Annotator","title":"Annotator"},{"location":"user-guide/annotator/#annotator","text":"","title":"Annotator"},{"location":"user-guide/label-data/","text":"Label data","title":"Label Data"},{"location":"user-guide/label-data/#label-data","text":"","title":"Label data"},{"location":"user-guide/label/","text":"Label","title":"Labels"},{"location":"user-guide/label/#label","text":"","title":"Label"},{"location":"user-guide/project/","text":"Project","title":"Projects"},{"location":"user-guide/project/#project","text":"","title":"Project"}]}